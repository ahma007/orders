package kafka

import (
	"context"
	"encoding/json"
	"log"

	"github.com/ahma007/orders/cache"
	"github.com/ahma007/orders/config"
	"github.com/ahma007/orders/db"
	"github.com/ahma007/orders/models"
	"github.com/segmentio/kafka-go"
)

func StartConsumer() {
	r := kafka.NewReader(kafka.ReaderConfig{
		Brokers: config.AppConfig.Kafka.Brokers,
		Topic:   config.AppConfig.Kafka.Topic,
		GroupID: config.AppConfig.Kafka.GroupID,
	})
	defer r.Close()

	log.Println("üü¢ Kafka consumer –∑–∞–ø—É—â–µ–Ω...")

	for {
		msg, err := r.ReadMessage(context.Background())
		if err != nil {
			log.Println("‚ùó–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Kafka:", err)
			continue
		}

		var order models.Order
		if err := json.Unmarshal(msg.Value, &order); err != nil {
			log.Println("‚ùó–û—à–∏–±–∫–∞ JSON –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ Kafka:", err)
			continue
		}

		log.Println("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –∏–∑ Kafka:", order.OrderUID)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ –∫–µ—à
		if err := db.SaveOrder(order); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î:", err)
		} else {
			cache.Set(order)
		}
	}
}
